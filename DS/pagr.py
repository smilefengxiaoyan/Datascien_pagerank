from lib2to3.pgen2.pgen import DFAState
from operator import index
from unittest import defaultTestLoader
from xml.etree.ElementPath import prepare_parent
import pandas as pd
import numpy
import os
import csv
import glob
import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
import pylab
from collections import Counter
import streamlit as st


filepath  = "/Users/smile/Desktop/DS/data.csv"
df = pd.read_csv(filepath)
res = df.values.tolist()
for i in range(len(res)):
    res[i][2] = dict({'tImage similarity weight': res[i][2]})
res = [tuple(x) for x in res]



g = nx.DiGraph()
g.add_nodes_from([i for i in range(1, 832)])
g.add_edges_from(res)




def pagerank(G, alpha=0.85, personalization=None,
             max_iter=100, tol=1.0e-6, nstart=None, weight='weight',
             dangling=None):
    """Return the PageRank of the nodes in the graph.
    Parameters
    -----------
    G : graph
        A NetworkX graph. 在PageRank算法里面是有向图
    alpha : float, optional
        稳定系数, 默认0.85, 心灵漂移teleporting系数，用于解决零outlink节点引起的spider trap问题
    personalization: dict, optional
      个性化向量，确定在分配中各个节点的权重
      格式举例，比如四个点的情况: {1:0.25,2:0.25,3:0.25,4:0.25}
      默认个点权重相等，也可以给某个节点多分配些权重，需保证权重和为1.
    max_iter : integer, optional
        最大迭代次数
    tol : float, optional
        迭代阈值
    nstart : dictionary, optional
        整个网络各节点PageRank初始值
    weight : key, optional
      各边权重
    dangling: dict, optional
      字典存储的是dangling边的信息
      key   --dangling node节点（出度为0的节点）
      value --dangling边的权重
      PR值按多大程度将资源分配给dangling node是根据personalization向量分配的
      This must be selected to result in an irreducible transition
      matrix (see notes under google_matrix). It may be common to have the
      dangling dict to be the same as the personalization dict.
    Notes
    -----
    特征值计算是通过迭代方法进行的，不能保证收敛，当超过最大迭代次数时，还不能减小到阈值内，就会报错
    """

    #步骤一：图结构的准备--------------------------------------------------------------------------
    if len(G) == 0:
        print('wrong1')
        return {}


    if not G.is_directed():
        print("TO")
        D = G.to_directed()
    else:
        print("Di")
        D = G

    # Create a copy in (right) stochastic form
    W = nx.stochastic_graph(D, weight=weight)
    N = W.number_of_nodes()


    # 确定PR向量的初值
    if nstart is None:  
        x = dict.fromkeys(W, 1.0 / N)  #和为1
    else:
        # Normalized nstart vector
        s = float(sum(nstart.values()))
        x = dict((k, v / s) for k, v in nstart.items())

    if personalization is None:
        # Assign uniform personalization vector if not given
        p = dict.fromkeys(W, 1.0 / N)
    else:
        missing = set(G) - set(personalization)
        if missing:
            print('Personalization dictionary '
                                'must have a value for every node. '
                                'Missing nodes %s' % missing)
        s = float(sum(personalization.values()))
        p = dict((k, v / s) for k, v in personalization.items()) #归一化处理

    if dangling is None:
        # Use personalization vector if dangling vector not specified
        dangling_weights = p
    else:
        missing = set(G) - set(dangling)
        if missing:
            print('Dangling node dictionary '
                                'must have a value for every node. '
                                'Missing nodes %s' % missing)
        s = float(sum(dangling.values()))
        dangling_weights = dict((k, v/s) for k, v in dangling.items())

    dangling_nodes = [n for n in W if W.out_degree(n, weight=weight) == 0.0]

    #dangling_nodes  dangling节点
    #danglesum       dangling节点PR总值

    #dangling初始化  默认为personalization
    #dangling_weights  根据dangling而生成，决定dangling node资源如何分配给全局的矩阵


    # 迭代计算--------------------------------------------------------------------

    #PR=alpha*(A*PR+dangling分配)+(1-alpha)*平均分配
    #分三部分计算，A*PR其实是我们用图矩阵分配的，dangling分配则是对dangling node的PR值进行分配，(1-alpha)分配则是天下为公大家一人一份分配的 

    for _ in range(max_iter):
        xlast = x
        x = dict.fromkeys(xlast.keys(), 0)  #x初值
        danglesum = alpha * sum(xlast[n] for n in dangling_nodes) #计算dangling_nodes的PR总值
        for n in x:        
            for nbr in W[n]:
                x[nbr] += alpha * xlast[n] * W[n][nbr][weight]    #第1部分:将节点n的PR资源分配给各个节点，循环之

            x[n] += danglesum * dangling_weights[n] + (1.0 - alpha) * p[n]   #第2部分 + 第3部分：danglingnodes贡献给此节点n的值 + 随机权重跳转到此节点n的值（输入网址到达此节点的贡献值）

        # 迭代检查
        err = sum([abs(x[n] - xlast[n]) for n in x])
        if err < N*tol:
            
            return x
            
   
    print('pagerank: power iteration failed to converge '
                        'in %d iterations.' % max_iter)


if __name__ == '__main__':
    filepath  = "/Users/smile/Desktop/DS/data.csv"
    df = pd.read_csv(filepath)
    res = df.values.tolist()
    for i in range(len(res)):
        res[i][2] = dict({'weight': res[i][2]})
      
    res = [tuple(x) for x in res]
   


    g = nx.Graph()
    g.add_nodes_from([i for i in range(0, 832)])
    g.add_edges_from(res)
    pr=pagerank(g)
   # print(pr)
    persona ={0: 0.0007961518652975869, 1: 0.0004477231120873112, 2: 0.00080537870408759, 3: 0.0007816489554262591, 4: 0.0009839750422716714, 5: 0.0009964642639339245, 6: 0.001128861378610486, 7: 0.0008202834753468926, 8: 0.001318329066031224, 9: 0.0012145038884494052, 10: 0.0009662473423213775, 11: 0.0014053146519265498, 12: 0.0009041565829306172, 13: 0.0012234622489261926, 14: 0.0012092410159415326, 15: 0.001103776184540295, 16: 0.0008778390854789779, 17: 0.0007674445090307055, 18: 0.0007700619003282486, 19: 0.0009675044183537333, 20: 0.0008509210169944096, 21: 0.0006019971000315889, 22: 0.0010710830381741377, 23: 0.001357475896783987, 24: 0.0007902614009325429, 25: 0.0010900554312340714, 26: 0.0009762327579916936, 27: 0.0008597384765349723, 28: 0.0007921042147879512, 29: 0.00119531105923623, 30: 0.0009001756731477836, 31: 0.0011753040005429987, 32: 0.0013712449661109358, 33: 0.0008636374802932575, 34: 0.0008046357921307779, 35: 0.0007510160045661476, 36: 0.0010801349530955569, 37: 0.0008293835070936872, 38: 0.0013793257025719555, 39: 0.0009487047641865539, 40: 0.0007600636362672325, 41: 0.0011847029430336483, 42: 0.001017732612591587, 43: 0.0009843492589504638, 44: 0.0010641808316083148, 45: 0.0012704907651288682, 46: 0.0008815329733420129, 47: 0.0012864685061749375, 48: 0.0010801449632308038, 49: 0.0012604901481334493, 50: 0.0014899682564370855, 51: 0.0012555888359572812, 52: 0.0009304288980968872, 53: 0.0007988913218304412, 54: 0.001154752164941063, 55: 0.0008187460152069581, 56: 0.0014250810669779392, 57: 0.0010000384888146892, 58: 0.0013088880813708302, 59: 0.0010881577653708272, 60: 0.0008534794195539414, 61: 0.0011721993046290011, 62: 0.0007918962271078735, 63: 0.0010819454262150584, 64: 0.0015541065881798427, 65: 0.0009042352654259795, 66: 0.0009168695196084581, 67: 0.0009275060713423218, 68: 0.0010687151284285647, 69: 0.000945497953002913, 70: 0.0009591866767001686, 71: 0.0015221627693985675, 72: 0.0011877926518130218, 73: 0.0010006554450287795, 74: 0.001111802791937847, 75: 0.0008663192826995407, 76: 0.0007259030239885786, 77: 0.0007516629939939149, 78: 0.0010495066020265902, 79: 0.0006235964587931759, 80: 0.0009213042579493054, 81: 0.0008703220026783406, 82: 0.0007184355129510044, 83: 0.001233447449177985, 84: 0.0007652374123990596, 85: 0.000760350151374753, 86: 0.0014051373203845037, 87: 0.0008729148737952021, 88: 0.0008191838536320818, 89: 0.0009316667554880491, 90: 0.000755278325218817, 91: 0.0009750504650646958, 92: 0.0008129690051212724, 93: 0.001314905929235057, 94: 0.0014125146616736914, 95: 0.0009180282167902772, 96: 0.0013369803879571447, 97: 0.0010580980351736927, 98: 0.000975855014440887, 99: 0.0010980662819643724, 100: 0.0008980065154225019, 101: 0.0008256174780948716, 102: 0.0010892331448912427, 103: 0.0010540177978649397, 104: 0.0012181979021607492, 105: 0.0009290453832605485, 106: 0.0007993191918725548, 107: 0.0012001571415119095, 108: 0.0012313534948080605, 109: 0.001569858986721989, 110: 0.0010436745414961908, 111: 0.001427593023989012, 112: 0.0015502464919519888, 113: 0.001147376144819145, 114: 0.0006803763482422439, 115: 0.000983021650116777, 116: 0.0007692955027586069, 117: 0.0007941442607563087, 118: 0.0011573264499832505, 119: 0.0007675290432639991, 120: 0.0007329679425850298, 121: 0.0009109281638010704, 122: 0.0014099852479689205, 123: 0.0010455656600838292, 124: 0.001019077204840827, 125: 0.000930934850964187, 126: 0.000748757594903447, 127: 0.0010873821150170384, 128: 0.0013446513611819332, 129: 0.0009744809422782989, 130: 0.0013947161146475571, 131: 0.0007720952976981281, 132: 0.001092813610983095, 133: 0.0008333774252445683, 134: 0.0008176998637986422, 135: 0.0017934485076357082, 136: 0.0008862993491828917, 137: 0.0011758263105289, 138: 0.001012782331496587, 139: 0.000822340673023202, 140: 0.0008356063550916525, 141: 0.0008396242839865728, 142: 0.0008010991665789319, 143: 0.0007869998073212633, 144: 0.0007654451528481484, 145: 0.0008283107721642446, 146: 0.0009444880677321552, 147: 0.0008888176816168642, 148: 0.000817306289937426, 149: 0.000749750631893697, 150: 0.0008234553027957598, 151: 0.0014036131752214694, 152: 0.0008389607365393991, 153: 0.0009707267745752198, 154: 0.0008574928586238102, 155: 0.0010702579680676968, 156: 0.0009338053382886409, 157: 0.0009033881371878266, 158: 0.0013068482869824987, 159: 0.000960077407914036, 160: 0.00111292764808953, 161: 0.0007182896864344791, 162: 0.0009459538941288745, 163: 0.001404828342394579, 164: 0.001167650659326592, 165: 0.0009351533905588348, 166: 0.0008132959128580854, 167: 0.001356322323690198, 168: 0.0005929300299330678, 169: 0.000939977987065724, 170: 0.0008054299475563708, 171: 0.0008919485670326099, 172: 0.0008213221878209526, 173: 0.0008383522886975118, 174: 0.0009882807388852226, 175: 0.0006578737834426209, 176: 0.000822986670372406, 177: 0.0010718697144929056, 178: 0.001620391000192267, 179: 0.001957861812503263, 180: 0.0009787399238678806, 181: 0.0005587018087783594, 182: 0.0007621036859135535, 183: 0.001261432721624773, 184: 0.0011734921858189426, 185: 0.0013426779904664858, 186: 0.0010392637526586827, 187: 0.0008706686042475306, 188: 0.0009416378957767868, 189: 0.0011300673756085115, 190: 0.0009861874263196037, 191: 0.0012372407270794005, 192: 0.0007002376327232625, 193: 0.0010224026734930287, 194: 0.0007244995806521916, 195: 0.0012104440211797394, 196: 0.0006228799105705908, 197: 0.001563300463303089, 198: 0.0007763747056009385, 199: 0.0018993864724897547, 200: 0.0014159968610706947, 201: 0.0014559960198026053, 202: 0.0008842381867858731, 203: 0.0008187546474316073, 204: 0.0010732699493127115, 205: 0.0017875253292977983, 206: 0.000798762885950695, 207: 0.0012632090939973238, 208: 0.0008314044919632544, 209: 0.000896810772843312, 210: 0.0009549522121440789, 211: 0.0009159356167081724, 212: 0.0007145271649971605, 213: 0.0010654264809306204, 214: 0.0015759311109160051, 215: 0.0009545690971832945, 216: 0.0008644736046942656, 217: 0.0010763939620677548, 218: 0.0008138243221795866, 219: 0.000721061285128145, 220: 0.0007666753573496575, 221: 0.0017019737271143057, 222: 0.0007803858900604975, 223: 0.0009201729183944665, 224: 0.0008525308941397567, 225: 0.0008232357405184223, 226: 0.0010941291011713602, 227: 0.0012803359074928093, 228: 0.0016146260859520028, 229: 0.0008412984775598287, 230: 0.001152744115907461, 231: 0.000882857567266865, 232: 0.0007202440618472902, 233: 0.0007455923133009233, 234: 0.0015939429375168303, 235: 0.0015534057630111483, 236: 0.0014359526401791366, 237: 0.001267118056827693, 238: 0.0009698648874181175, 239: 0.001472104282040383, 240: 0.0013144123711787763, 241: 0.001046413116596501, 242: 0.0008820709344081093, 243: 0.001792666714271529, 244: 0.0009662449175555731, 245: 0.001071633580222276, 246: 0.0010986901589402631, 247: 0.0009850940350259747, 248: 0.0011234918881611908, 249: 0.0009410096243255314, 250: 0.0008138459410155428, 251: 0.0011285600209284116, 252: 0.0009868412943196331, 253: 0.001320831591851684, 254: 0.0010753762738343942, 255: 0.0009798484634585404, 256: 0.0007537237977565008, 257: 0.0007270738888217994, 258: 0.001631269216682164, 259: 0.0013687153115247335, 260: 0.0010939902150087217, 261: 0.0008195281172180199, 262: 0.0015350702685586468, 263: 0.001180235276725218, 264: 0.0007434502580899522, 265: 0.0011491921109039725, 266: 0.0010656522687333737, 267: 0.0010072012812866818, 268: 0.0010955061447496847, 269: 0.000987476093763746, 270: 0.0018981867688697709, 271: 0.001402284346286913, 272: 0.0009188180921097549, 273: 0.0010937079641471224, 274: 0.0012228602986297365, 275: 0.0015174384008409324, 276: 0.000986965301922968, 277: 0.0013126268482981773, 278: 0.0014775576923229895, 279: 0.0012618956456028644, 280: 0.0012760433265974207, 281: 0.0011056222643572886, 282: 0.0014247628773934977, 283: 0.0013140538875964906, 284: 0.001654804573975482, 285: 0.0012883297182036063, 286: 0.001257949272431441, 287: 0.0012612490201045071, 288: 0.001980344610738975, 289: 0.0022600115082919885, 290: 0.0012996932016191818, 291: 0.0012097219991327793, 292: 0.0008486130719361395, 293: 0.0008347878025821538, 294: 0.0014019422259274204, 295: 0.001159507978909583, 296: 0.0013423759003652611, 297: 0.0013632943731620704, 298: 0.0013114325497451452, 299: 0.0009626755768165692, 300: 0.0010676774016005661, 301: 0.001189787196346717, 302: 0.0012173985048136548, 303: 0.00151975480970021, 304: 0.001654740617153335, 305: 0.0016806223857937798, 306: 0.0011724656174918351, 307: 0.0007415428698824269, 308: 0.001337880803109081, 309: 0.0011356285599042294, 310: 0.00113990496585899, 311: 0.0015901001164745515, 312: 0.0007845037348987886, 313: 0.0013994657520596942, 314: 0.0018995792742663674, 315: 0.001458919542035375, 316: 0.0016430288639956755, 317: 0.0015897581031245375, 318: 0.0012652005851297055, 319: 0.0009260356947239316, 320: 0.0012563323301012506, 321: 0.0010993583375209785, 322: 0.0010875662550321752, 323: 0.0010873655608917086, 324: 0.0016890396804056667, 325: 0.0005808219890136572, 326: 0.0017569344165692495, 327: 0.0012499559554330312, 328: 0.0014717944768027355, 329: 0.0012447752434435113, 330: 0.0010975798117596005, 331: 0.0014687333617817253, 332: 0.0009560241465759804, 333: 0.001278039768136216, 334: 0.001324453180199535, 335: 0.0010114003739451678, 336: 0.0009226538545871057, 337: 0.001654269823768134, 338: 0.0015362737888402857, 339: 0.0018833225055944782, 340: 0.001386567662540417, 341: 0.0016671400952271932, 342: 0.001284580591663616, 343: 0.0016672814573322884, 344: 0.0013790374407257697, 345: 0.002165887293583058, 346: 0.002636424099415053, 347: 0.0017757641646413019, 348: 0.0015435898934312983, 349: 0.0019135333997611446, 350: 0.001995341332672313, 351: 0.0011299803081076323, 352: 0.001575684933659513, 353: 0.0010972375082910512, 354: 0.0017567233084113583, 355: 0.0008856651387558539, 356: 0.0010062440626483816, 357: 0.0022955600145021394, 358: 0.0013379785350956018, 359: 0.0017405613641237568, 360: 0.0009163124886252058, 361: 0.0017352813637143236, 362: 0.0010507413240064315, 363: 0.0013359360087069922, 364: 0.001658269036971501, 365: 0.0024144795369157486, 366: 0.001766191034840634, 367: 0.002429671632541545, 368: 0.0016602547228165905, 369: 0.0015321707852890341, 370: 0.001382603778382841, 371: 0.001733483396001927, 372: 0.0013231519154448456, 373: 0.0011790600886656306, 374: 0.0021065253820549356, 375: 0.0015672305995449473, 376: 0.0010050702661857948, 377: 0.0012669883974428394, 378: 0.0016024193403763897, 379: 0.0014670570796105154, 380: 0.0013217523550323915, 381: 0.0015683835535434873, 382: 0.0007679592569017471, 383: 0.001147897677397065, 384: 0.0012269762303813248, 385: 0.001120977589103777, 386: 0.001758643888252648, 387: 0.001689942334276224, 388: 0.0009137331043482602, 389: 0.001884374857355307, 390: 0.0010516147662617094, 391: 0.002007488164589314, 392: 0.0012373454713682681, 393: 0.001176114839971325, 394: 0.0015910574707901522, 395: 0.0020201332434065765, 396: 0.0013880165319216885, 397: 0.0014692551680162644, 398: 0.0015370085340652253, 399: 0.0009944771408277747, 400: 0.0016624773137371045, 401: 0.0020180990670533427, 402: 0.0011147883341019948, 403: 0.0016575727758048136, 404: 0.0012748993473788754, 405: 0.001146500942479675, 406: 0.001889662453207458, 407: 0.0017340842835242589, 408: 0.000991916327466583, 409: 0.001669445840140069, 410: 0.00114367257229763, 411: 0.0010922722478154969, 412: 0.0017400879544389217, 413: 0.0015233331229185367, 414: 0.0013765432328501162, 415: 0.0015286848058131699, 416: 0.001273713549893383, 417: 0.0012073140537971366, 418: 0.0013240420513724329, 419: 0.0014743810988447426, 420: 0.0006590134980071678, 421: 0.0010371590912646668, 422: 0.0018264066940606794, 423: 0.000928860945075476, 424: 0.001417346286998436, 425: 0.0009648676381661252, 426: 0.0013269301038296094, 427: 0.0012048096240265026, 428: 0.0009876059910122453, 429: 0.0017164597455430507, 430: 0.001208692254065306, 431: 0.00115163045929555, 432: 0.0015066362215257264, 433: 0.000831143810047104, 434: 0.0008918329396712827, 435: 0.001157848751476128, 436: 0.0012288283151467004, 437: 0.0012372439469509483, 438: 0.0013798265656086008, 439: 0.0008667916160681466, 440: 0.0017842259890533982, 441: 0.001419408757252992, 442: 0.0018319608572776684, 443: 0.00141145203097728, 444: 0.0012403576916808529, 445: 0.0011213771383771106, 446: 0.001419796518968549, 447: 0.0009720214837435905, 448: 0.0010623491672232092, 449: 0.0012425949439759155, 450: 0.0015488925808930533, 451: 0.0012408143177260512, 452: 0.001700247514390567, 453: 0.0008448249759968009, 454: 0.0013054237050965974, 455: 0.0012017504992811827, 456: 0.001432475841059216, 457: 0.000855332994666598, 458: 0.0012796403293810657, 459: 0.001595201135868779, 460: 0.0011025123784554427, 461: 0.0011818504059790882, 462: 0.0015926699359691547, 463: 0.0012543525021966229, 464: 0.001621846519005477, 465: 0.0010676331228575374, 466: 0.001154788931658591, 467: 0.0014509296000768171, 468: 0.0013046545364543691, 469: 0.0011987133650891756, 470: 0.00129733841289753, 471: 0.001552977907099807, 472: 0.0017483075724336072, 473: 0.001366730798202631, 474: 0.0009618660166235536, 475: 0.0008804602583879361, 476: 0.0010587262106379611, 477: 0.0010448168048577424, 478: 0.0007632259881776096, 479: 0.0009543479699953868, 480: 0.000766570280616011, 481: 0.0006724065169969318, 482: 0.0012452067418922492, 483: 0.0014023548634145445, 484: 0.0012897799602371994, 485: 0.0009871967041283135, 486: 0.001282345323052476, 487: 0.0013379254854817282, 488: 0.0011545956498439569, 489: 0.0010340291230136371, 490: 0.000623120523142232, 491: 0.0013436483351423154, 492: 0.0012691672711740945, 493: 0.001086154434635734, 494: 0.0015276482243772708, 495: 0.0015468623728400075, 496: 0.0010919436694809914, 497: 0.0017741492439190141, 498: 0.0007356804351899034, 499: 0.0006275772603751087, 500: 0.0014959521611172212, 501: 0.0013580209646674596, 502: 0.0010625383304877967, 503: 0.0011779558299362634, 504: 0.0015998328319291539, 505: 0.0008875111863788548, 506: 0.0009143369525673891, 507: 0.0007308934608171799, 508: 0.0018677463697339474, 509: 0.0014152085956961127, 510: 0.0011148856738966402, 511: 0.0006026895101696327, 512: 0.001488096689691128, 513: 0.000733717445180643, 514: 0.0008946530347352942, 515: 0.0009344312656459406, 516: 0.00035328647644200316, 517: 0.0007206659712171303, 518: 0.0007550786087793488, 519: 0.000750885371043904, 520: 0.0011911817956012406, 521: 0.0010989769554142562, 522: 0.0009523101049729379, 523: 0.0010892328270324361, 524: 0.0011795618156838878, 525: 0.0009830694079396888, 526: 0.0010957220497078294, 527: 0.0009066129065273178, 528: 0.0010814290353421605, 529: 0.0011691529385937452, 530: 0.0006960115182073308, 531: 0.0008503651237507141, 532: 0.0007228135520775134, 533: 0.0013586224367913575, 534: 0.0016207826778524394, 535: 0.0015282846968934615, 536: 0.0010733516241429209, 537: 0.0006909230633463186, 538: 0.0008344681010022191, 539: 0.0010945501425299088, 540: 0.0013979191043207659, 541: 0.0009378171431720772, 542: 0.0009347916911854774, 543: 0.0009577800706861427, 544: 0.0007128152965945734, 545: 0.0012429664557000067, 546: 0.0008348276393831414, 547: 0.0015277763287117818, 548: 0.0010155017050217656, 549: 0.0010699191315359327, 550: 0.0004612979975018305, 551: 0.0013078263929186746, 552: 0.0011142778724982458, 553: 0.0012793337144872837, 554: 0.0010189853891282759, 555: 0.0008412437111184376, 556: 0.0009395719951980566, 557: 0.001220337612843304, 558: 0.0010892938226605754, 559: 0.0010957495442339266, 560: 0.0011020790565201047, 561: 0.0010257315988978504, 562: 0.0010567377000739917, 563: 0.0012832800242356165, 564: 0.000845981668867489, 565: 0.0014660689649131167, 566: 0.0009707514611215307, 567: 0.0008534070244641454, 568: 0.000904316076430884, 569: 0.0010357314488159137, 570: 0.0013807119591020042, 571: 0.001568315498034125, 572: 0.0009767084855067817, 573: 0.0008543191608452231, 574: 0.0009258887178056229, 575: 0.0011557493583171836, 576: 0.0012071344249853613, 577: 0.0015808704265472004, 578: 0.0009554413409925468, 579: 0.001630054965338548, 580: 0.0009613359145147758, 581: 0.0010753646618027876, 582: 0.001075098653130956, 583: 0.0008471014887370586, 584: 0.0009660308731292096, 585: 0.0014186506440420712, 586: 0.0008142610383490877, 587: 0.0008915135687104782, 588: 0.0008065594373299007, 589: 0.0008422136680258917, 590: 0.0007443964059578586, 591: 0.0010925948212172278, 592: 0.001167947694568061, 593: 0.0009187995503803469, 594: 0.0012840250096617812, 595: 0.0009520706101145562, 596: 0.001464250970356146, 597: 0.0013355144306312669, 598: 0.00045985454637619596, 599: 0.0016191001683706124, 600: 0.0016974829376025272, 601: 0.0017962888163909516, 602: 0.0011336362754494332, 603: 0.0009669261977721117, 604: 0.0007089937813165039, 605: 0.0007705578697797168, 606: 0.0007881219816265279, 607: 0.0007536683826871172, 608: 0.0009143461663832093, 609: 0.0009451016145801265, 610: 0.0010938592611656865, 611: 0.0018063433345829642, 612: 0.0009769801157049256, 613: 0.0010155727159872623, 614: 0.0009509768403567369, 615: 0.0010601340659260124, 616: 0.0012454702921625208, 617: 0.0011230105779663096, 618: 0.0008601566999904269, 619: 0.0008761013425445235, 620: 0.0008258910471257931, 621: 0.0009289839831440079, 622: 0.0009105186167180547, 623: 0.0011858926694143974, 624: 0.0009406758029865681, 625: 0.0008352926104462328, 626: 0.0007748017910140672, 627: 0.0012272550819847484, 628: 0.001027408961372123, 629: 0.0008829308794786178, 630: 0.0009802614576799426, 631: 0.0008846286496696615, 632: 0.0011367797727660067, 633: 0.0012976608580468156, 634: 0.0007879342348839953, 635: 0.0008815902268314506, 636: 0.0006923823807219735, 637: 0.0007179367026084863, 638: 0.0017433155584470343, 639: 0.0011818917917405605, 640: 0.00109646426551181, 641: 0.000981781860794285, 642: 0.000692115307148345, 643: 0.0009495469458011646, 644: 0.0011759157444435578, 645: 0.0009381577276716348, 646: 0.0008750228621927326, 647: 0.0010179284799223959, 648: 0.0010073574252135744, 649: 0.0008894939018567218, 650: 0.0010618456147752102, 651: 0.001160957396396239, 652: 0.0012457504543482662, 653: 0.0010300958671660648, 654: 0.0007139214110846732, 655: 0.0012452155492985876, 656: 0.000978057907552454, 657: 0.0007934615256131999, 658: 0.0017475332180839616, 659: 0.0010785764606065704, 660: 0.0013675312864387759, 661: 0.0019743744688596673, 662: 0.0014385676807338408, 663: 0.0014027790967560665, 664: 0.0008431707557501663, 665: 0.0007980415452142454, 666: 0.002014524923115404, 667: 0.0014540449626924727, 668: 0.0014589563203138008, 669: 0.0012294456287345252, 670: 0.0011956568912074323, 671: 0.001322231198993143, 672: 0.0013040132777642265, 673: 0.0014442338617960012, 674: 0.0010829505026882292, 675: 0.0007012322642115185, 676: 0.0010003584890917034, 677: 0.0017270408623644162, 678: 0.0009970523698139117, 679: 0.0020951311161664004, 680: 0.002052014277500275, 681: 0.001238203552094336, 682: 0.0014133890341078196, 683: 0.0015442684525485682, 684: 0.0013391012560689654, 685: 0.0018112809115035696, 686: 0.0016853675793794104, 687: 0.0012853758409642406, 688: 0.0018260571936899138, 689: 0.001551573137692218, 690: 0.0013437061494381394, 691: 0.0014998061914305789, 692: 0.0008887214651103379, 693: 0.0017179040819122072, 694: 0.0011761258256843235, 695: 0.0013540626955320485, 696: 0.0013172402989735236, 697: 0.0013205427929098984, 698: 0.0016272622717836405, 699: 0.000919380984606224, 700: 0.0013096396614023587, 701: 0.001137679480249143, 702: 0.001360739679633367, 703: 0.0014763545807033082, 704: 0.0008945509292161007, 705: 0.0016615951483772546, 706: 0.0017689381592034677, 707: 0.0010156868097237048, 708: 0.0010614641844868967, 709: 0.0016039406949216652, 710: 0.0013852765067484017, 711: 0.0012745429539394234, 712: 0.0016075039369230519, 713: 0.0016813728153312348, 714: 0.001477360704108418, 715: 0.0011808020461044884, 716: 0.0018216965361273455, 717: 0.001025866145528912, 718: 0.0018215379869435141, 719: 0.0008332293799798992, 720: 0.0016148317885026423, 721: 0.0018085949047379642, 722: 0.0013974504190053295, 723: 0.0019810102915809235, 724: 0.0012000254102259398, 725: 0.001569346839931099, 726: 0.0015116495912470302, 727: 0.0008435934188356494, 728: 0.0012795634281676412, 729: 0.001476277968223075, 730: 0.0011440132227670814, 731: 0.001740308885863534, 732: 0.0012711051128608082, 733: 0.0014143176057117045, 734: 0.0010559610687584807, 735: 0.0012579181700894154, 736: 0.0016612213905190581, 737: 0.001081080159140509, 738: 0.0007564521907096242, 739: 0.0014892078567552139, 740: 0.00100760589427756, 741: 0.001079265600725654, 742: 0.0025722181880322255, 743: 0.001681425906221848, 744: 0.0010361984876155804, 745: 0.0018966445237623556, 746: 0.0020397508781837908, 747: 0.0011104154856001881, 748: 0.0005394726059615741, 749: 0.0010686681605766642, 750: 0.001688575631737201, 751: 0.0014868159237778423, 752: 0.0017306212096411828, 753: 0.0012199400662027743, 754: 0.0012735094024553645, 755: 0.001371552357789916, 756: 0.001639441492320202, 757: 0.0010390090113654427, 758: 0.0016208140388021632, 759: 0.0010792686797797004, 760: 0.000993337507977195, 761: 0.0011691403163826108, 762: 0.0009326532319594315, 763: 0.0014383682848499659, 764: 0.0012184727328407047, 765: 0.0016536486427970955, 766: 0.0018183897796926962, 767: 0.001971401090083885, 768: 0.0015339552462455615, 769: 0.00224616933655342, 770: 0.0011209088007840368, 771: 0.0009651245570580383, 772: 0.0014361201408202137, 773: 0.0009253585253291023, 774: 0.0008804811170616421, 775: 0.000960808415999845, 776: 0.0010782353750562405, 777: 0.0013276926877994113, 778: 0.0016063128368249296, 779: 0.0011826479109778556, 780: 0.0013100048632982747, 781: 0.0017727149080117757, 782: 0.0013753277371993187, 783: 0.0009733591030900837, 784: 0.0017484365138624946, 785: 0.001314269135087601, 786: 0.001773495771669411, 787: 0.0016156413191886622, 788: 0.0012710392692556248, 789: 0.0012572751514254344, 790: 0.001703673172613578, 791: 0.0014697162403665364, 792: 0.0011065755642527644, 793: 0.0016506886470524396, 794: 0.0013333376251135984, 795: 0.0008817225713623154, 796: 0.0011615800451301261, 797: 0.001819137516158666, 798: 0.0007930559629207176, 799: 0.0012917049990696452, 800: 0.0012223780970340165, 801: 0.0016046025346663176, 802: 0.0012713197763961812, 803: 0.0017099856271929042, 804: 0.0019892874435962875, 805: 0.0015315606132756394, 806: 0.0016696786036535373, 807: 0.0012586887419061077, 808: 0.0011408264544010202, 809: 0.0015924035871297845, 810: 0.0013075719002352433, 811: 0.001638567228507701, 812: 0.0012180261668993096, 813: 0.0019831878968595536, 814: 0.0017122211445643747, 815: 0.0009336964620243728, 816: 0.0018394371387286217, 817: 0.00117782776401722, 818: 0.0018091550855206695, 819: 0.0015122842417064557, 820: 0.0015222554305997032, 821: 0.0015755434829213774, 822: 0.001740650826209336, 823: 0.001942312437132875, 824: 0.0021412519277906328, 825: 0.0016879573506572753, 826: 0.0010473678806342806, 827: 0.0016303855861955693, 828: 0.0021444794263719394, 829: 0.00241445065501228, 830: 0.0012267034414723446, 831: 0.001238830686784846}
    prp=pagerank(g,0.85,persona)
    #print(prp)

    pr_df = pd.DataFrame(pr,index=[0]).T
    prp_df = pd.DataFrame(prp,index=[1]).T
    

    anly=pd.concat([pr_df, prp_df], axis=1)

    new =sorted(pr.items(),key=lambda x:-x[1])
    newp =sorted(prp.items(),key=lambda x:-x[1])
    new_df = pd.DataFrame(new)
    print(new_df)
    newp_df = pd.DataFrame(newp)
    dif=pd.concat([new_df[0], newp_df[0]], axis=1)
    dif.columns=list('ab')
    print(dif)
    differe=dict(Counter(pr)-Counter(prp))
    #print(differe)

    st.title(" DataScience 1 _task5 of Pagerank ")
    st.header("My Vusiluation")
    st.subheader("Data Analytics")
    
    st.title("Orginal Dataset ")
    st.line_chart(df)
    st.title("Basis Pagerank ")
    st.dataframe(new)
    st.title("Personali Pagerank ")
    st.dataframe(newp)
    st.title(" Line chart Pagerank Value ")
    st.line_chart(anly)
    st.title("Diffenetent Pagerank Value visua ")
    st.line_chart(dif)
    
 

    
